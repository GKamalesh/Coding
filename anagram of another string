We say that a string 's' is an anagram of another string 't' if the
letters in 's' can be rearranged to form 't'.

For example, "butterfly" is an anagram of "flutterby", since a
rearrangement of the first word results in the second.

We say that a position 'i' in 's' and 't' match, if 's' is an anagram of
't', and s[i]==t[i].

In this question, you will be given two words, 's' and 't'. You have
to output the number of matching positions if s is an anagram of t,
and -1 if s is not an anagram of t.

Input
-----
The input consists of two lines. The first line contains the first
string, with length <= 100 characters. The second line contains the
second string, with length <= 100 characters.

Output
------
If the first string is an anagram of the second string, then output
the number of matching positions. Otherwise, print -1.

Sample Input 1
--------------
butterfly
flutterby

Sample Output 1
---------------
2

Sample Input 2
--------------
home
come

Sample Output 2
---------------
-1     

Sample Test Cases
Input	Output
Test Case 1	
anarchy
anerchy
output:
-1
Test Case 2	
cyclonepic
enolcyccpi
output:
1


#include<stdio.h>
#include<string.h>
int main()
{
  int i,m,n,j,t=0,c,f=0;
  char a[1000],b[1000],d[1000];
  scanf("%s %s",a,b);
  strcpy(d,b);
  m=strlen(a);
  n=strlen(b);
  if(m==n)
  {
    for(i=0;i<n;i++)
    {
      c=0;
      for(j=0;j<n;j++)
      {
        if(a[i]==b[j])
        {
          b[j]=-1;
          c=1;
          break;
        }
      }
      if(c==0)
      {
        printf("-1");
        f=1;
      }
      else
      {
        if(a[i]==d[i])
        {
          t+=1;
        }
      }
    }
    if(f==0)
    printf("%d",t);
  }
  else
    printf("-1");
return 0;
}
