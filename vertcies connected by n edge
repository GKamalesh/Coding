A graph is abstractly a collection of vertices which are labelled by
non-negative integers, and a collection of edges. A graph called an
undirected graph if we talk of merely the presence of an edge between
vertices i and j, rather than its direction. 

For example, the following is a graph:


In this problem, you are given the edges in an undirected graph. An
edge is a pair of non-negative integers (i, j) which indicates that
the vetex i is connected to vetex j by an edge.

Afterwards, you will be given a vertex number n. You have to output
the list of vertices which are connected n by an edge, in the order in
which the edges were input.

Input

You are given the following.

1. The first line contains an integer, E, between 1 and 1000

2. This is followed by E lines, where each containing a pair of
numbers i and j where i and j are both non-negative integers <=
34,000. No edge will be listed more than once.

3. The last line contains a non-negative integer n <= 34,000. n is
assured to be a vertex listed in one of the E lines in part (2).

Output

You have to output the list of nodes to which n has an edge, in the
order in which the edges were input, one line for each vertex.

Sample Test Cases
Input	Output
Test Case 1	
4
1 2
2 3
3 4
4 5
4
Output:
3
5
Test Case 2	
10
1 2
1 3
1 4
2 3
2 4
5 1
5 2
5 3
5 4
6 1
1
Output:
2
3
4
5
6



#include<stdio.h>
int main()
{
  int n,m,a[10000],b[1000],i,j;
  scanf("%d",&n);
  for(i=0;i<n;i++)
  {
    scanf("%d",&a[i]);
    scanf("%d",&b[i]);
  }
  scanf("%d",&m);
  for(i=0;i<n;i++)
  {
    if(a[i]==m)
      printf("%d\n",b[i]);
    else if(b[i]==m)
      printf("%d\n",a[i]);
  }
  return 0;
}
