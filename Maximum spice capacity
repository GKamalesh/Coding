There are N bottles with different capacities filled with different types of spices.
The spices are mixed in certain order to get a perfect mix.
The bottle to be picked up to mix with spice is calculated by adding the capacity of the current bottle to the current position of the bottle.
The chef is greedy and hence wants to mix the maximum number of different spices(not maximum capacity) to the dish. 
Print the capacities of the bottles to be mixed in the specified order to get maximum types of spices. 

Note: If there are more than one maximum set of spices exist, print the first occurring maximum set. 

Boundary Condition(s): 1 <= N <= 1000 1 < = capacity < = 100 

Input Format: The first line contains N. The second line contains N integers 

separated by space(s). 

Output Format: The first line contains integers separated by a space.
Example Input/Output 1: Input: 

5 

1 2 3 4 5 

Output: 1 2 4 

Explanation: 

Possib|e order of capacities are, 3 spices -> 1 2 4 

2 spices -> 2 4 

1 spice -> 3 

1 spice -> 4 

1 spice -> 5 

Example Input/Output 2: Input: 

7 

1 6 3 1 12 1 4 

Output: 3 1 4


#include<stdio.h>
int main()
{
    long long int i,j,c=0,e,k=0,l=0,n,a[1000],d[100000],f[100000],s,r,m=0;
    scanf("%lld",&n);
    for(i=1;i<=n;i++)   
    scanf("%lld",&a[i]);     
    for(i=1;i<=n;i++)   
    {
        j=i;        
        e=0;            
        while(j<=n)      
        {
            d[k]=j;          
            j+=a[j];            
            e++;    
            f[l]=e;          
            k++;  
        }
        d[k]=0; 
        k++;        
        l++;    
    }
    s=f[0];
    e=0;    
    for(i=0;i<l;i++)    
    {
        if(f[i]>s)  
        {   
            s=f[i]; 
            e=i;    
        }
    }
    for(i=0;i<=k;i++)
    {
        if(d[i]==0) 
        m++;
        if(d[i]==0 && m==e)  
        c=i;
        if(d[i]==0 && m==e+1)     
        s=i;
    }
    for(i=c;i<s;i++)
    {
        if(a[(d[i])]!=0)
    printf("%lld ",a[(d[i])]); 
    }
    return 0;
}
